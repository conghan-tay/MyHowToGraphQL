// Code generated by sqlc. DO NOT EDIT.
// source: link.sql

package db

import (
	"context"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (
  title, address
) VALUES (
  $1, $2
)
RETURNING id, title, address, user_id
`

type CreateLinkParams struct {
	Title   string `json:"title"`
	Address string `json:"address"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.queryRow(ctx, q.createLinkStmt, createLink, arg.Title, arg.Address)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Address,
		&i.UserID,
	)
	return i, err
}

const getLinks = `-- name: GetLinks :many
SELECT id, title, address, user_id FROM links
`

func (q *Queries) GetLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.query(ctx, q.getLinksStmt, getLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Address,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
